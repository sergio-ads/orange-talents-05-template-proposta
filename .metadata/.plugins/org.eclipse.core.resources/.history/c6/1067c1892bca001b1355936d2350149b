package br.com.zupacademy.biometria.controller;

import java.net.URI;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.zupacademy.biometria.model.request.BiometriaRequest;
import br.com.zupacademy.proposta.model.Biometria;
import br.com.zupacademy.proposta.model.dto.BiometriaDto;
import br.com.zupacademy.proposta.repository.BiometriaRepository;

@RestController
@RequestMapping(value = "/biometria")
public class BiometriaController {
    @Autowired
    private BiometriaRepository biometriaRepository;

    @GetMapping("/{idBiometria}")
    public BiometriaDto get(@PathVariable("idCartao") String idCartao, @PathVariable("idBiometria") String idBiometria) {
        Biometria biometria = biometriaRepository.findById(idBiometria)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND ,"Biometria não encontrada"));
        return new BiometriaDto(biometria);
    }

    @Transactional
    @PostMapping
    public ResponseEntity<?> save(@RequestBody @Valid BiometriaRequest biometriaRequest, UriComponentsBuilder uriBuilder) {
        Biometria biometria = biometriaRequest.toModel();
        biometriaRepository.save(biometria);        
        biometria.buscarResultadoAvaliacao(analiseClient);
        
        URI uri = uriBuilder.path("/biometria/{id}").buildAndExpand(biometria.getId()).toUri();
        return ResponseEntity.created(uri).build();
    }

    @Transactional
    @DeleteMapping("/{idBiometria}")
    public void delete(@PathVariable("id") String id) {
    	Assert.state(biometriaRepository.findById(id).isPresent(), "Biometria não localizada");
        biometriaRepository.deleteById(id);
    }

}
